/**
 * A complex usage example which creates a midi-like instrument which is able to
 * play 4 notes at once. Default music just plays the entire note range increacing.
 */
#include <Sound.h>
#include <SoundPlayer.h>

// A simple sine wave sample...
const PROGMEM uint8_t sineWave[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 
  5, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
  17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 
  32, 33, 35, 36, 37, 39, 40, 42, 44, 45, 47, 48, 
  50, 52, 53, 55, 57, 58, 60, 62, 63, 65, 67, 69, 
  70, 72, 74, 76, 77, 79, 81, 83, 84, 86, 88, 90, 
  92, 93, 95, 97, 99, 100, 102, 104, 106, 107, 109, 
  111, 112, 114, 116, 117, 119, 121, 122, 124, 125, 
  127, 129, 130, 132, 133, 134, 136, 137, 139, 140, 
  141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 
  153, 154, 155, 156, 157, 158, 159, 160, 161, 161, 
  162, 163, 164, 164, 165, 165, 166, 166, 167, 167, 
  168, 168, 168, 169, 169, 169, 169, 169, 169, 169, 
  170, 169, 169, 169, 169, 169, 169, 169, 168, 168, 
  168, 167, 167, 166, 166, 165, 165, 164, 164, 163, 
  162, 161, 161, 160, 159, 158, 157, 156, 155, 154, 
  153, 152, 151, 150, 149, 148, 146, 145, 144, 143, 
  141, 140, 139, 137, 136, 134, 133, 132, 130, 129, 
  127, 125, 124, 122, 121, 119, 117, 116, 114, 112, 
  111, 109, 107, 106, 104, 102, 100, 99, 97, 95, 93, 
  92, 90, 88, 86, 85, 83, 81, 79, 77, 76, 74, 72, 70, 
  69, 67, 65, 63, 62, 60, 58, 57, 55, 53, 52, 50, 48, 
  47, 45, 44, 42, 40, 39, 37, 36, 35, 33, 32, 30, 29, 
  28, 26, 25, 24, 23, 21, 20, 19, 18, 17, 16, 15, 14, 
  13, 12, 11, 10, 9, 8, 8, 7, 6, 5, 5, 4, 4, 3, 3, 2, 
  2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0
};
const size_t sineWaveLen = sizeof(sineWave) / sizeof(uint8_t);

// Plays all midi tones, 0-127 increasing.
const uint16_t PROGMEM music[] = {
  0b0000000000001010,
  0b1000000000000000,
  0b0000000100001010,
  0b1000000000000000,
  0b0000001000001010,
  0b1000000000000000,
  0b0000001100001010,
  0b1000000000000000,
  0b0000010000001010,
  0b1000000000000000,
  0b0000010100001010,
  0b1000000000000000,
  0b0000011000001010,
  0b1000000000000000,
  0b0000011100001010,
  0b1000000000000000,
  0b0000100000001010,
  0b1000000000000000,
  0b0000100100001010,
  0b1000000000000000,
  0b0000101000001010,
  0b1000000000000000,
  0b0000101100001010,
  0b1000000000000000,
  0b0000110000001010,
  0b1000000000000000,
  0b0000110100001010,
  0b1000000000000000,
  0b0000111000001010,
  0b1000000000000000,
  0b0000111100001010,
  0b1000000000000000,
  0b0001000000001010,
  0b1000000000000000,
  0b0001000100001010,
  0b1000000000000000,
  0b0001001000001010,
  0b1000000000000000,
  0b0001001100001010,
  0b1000000000000000,
  0b0001010000001010,
  0b1000000000000000,
  0b0001010100001010,
  0b1000000000000000,
  0b0001011000001010,
  0b1000000000000000,
  0b0001011100001010,
  0b1000000000000000,
  0b0001100000001010,
  0b1000000000000000,
  0b0001100100001010,
  0b1000000000000000,
  0b0001101000001010,
  0b1000000000000000,
  0b0001101100001010,
  0b1000000000000000,
  0b0001110000001010,
  0b1000000000000000,
  0b0001110100001010,
  0b1000000000000000,
  0b0001111000001010,
  0b1000000000000000,
  0b0001111100001010,
  0b1000000000000000,
  0b0010000000001010,
  0b1000000000000000,
  0b0010000100001010,
  0b1000000000000000,
  0b0010001000001010,
  0b1000000000000000,
  0b0010001100001010,
  0b1000000000000000,
  0b0010010000001010,
  0b1000000000000000,
  0b0010010100001010,
  0b1000000000000000,
  0b0010011000001010,
  0b1000000000000000,
  0b0010011100001010,
  0b1000000000000000,
  0b0010100000001010,
  0b1000000000000000,
  0b0010100100001010,
  0b1000000000000000,
  0b0010101000001010,
  0b1000000000000000,
  0b0010101100001010,
  0b1000000000000000,
  0b0010110000001010,
  0b1000000000000000,
  0b0010110100001010,
  0b1000000000000000,
  0b0010111000001010,
  0b1000000000000000,
  0b0010111100001010,
  0b1000000000000000,
  0b0011000000001010,
  0b1000000000000000,
  0b0011000100001010,
  0b1000000000000000,
  0b0011001000001010,
  0b1000000000000000,
  0b0011001100001010,
  0b1000000000000000,
  0b0011010000001010,
  0b1000000000000000,
  0b0011010100001010,
  0b1000000000000000,
  0b0011011000001010,
  0b1000000000000000,
  0b0011011100001010,
  0b1000000000000000,
  0b0011100000001010,
  0b1000000000000000,
  0b0011100100001010,
  0b1000000000000000,
  0b0011101000001010,
  0b1000000000000000,
  0b0011101100001010,
  0b1000000000000000,
  0b0011110000001010,
  0b1000000000000000,
  0b0011110100001010,
  0b1000000000000000,
  0b0011111000001010,
  0b1000000000000000,
  0b0011111100001010,
  0b1000000000000000,
  0b0100000000001010,
  0b1000000000000000,
  0b0100000100001010,
  0b1000000000000000,
  0b0100001000001010,
  0b1000000000000000,
  0b0100001100001010,
  0b1000000000000000,
  0b0100010000001010,
  0b1000000000000000,
  0b0100010100001010,
  0b1000000000000000,
  0b0100011000001010,
  0b1000000000000000,
  0b0100011100001010,
  0b1000000000000000,
  0b0100100000001010,
  0b1000000000000000,
  0b0100100100001010,
  0b1000000000000000,
  0b0100101000001010,
  0b1000000000000000,
  0b0100101100001010,
  0b1000000000000000,
  0b0100110000001010,
  0b1000000000000000,
  0b0100110100001010,
  0b1000000000000000,
  0b0100111000001010,
  0b1000000000000000,
  0b0100111100001010,
  0b1000000000000000,
  0b0101000000001010,
  0b1000000000000000,
  0b0101000100001010,
  0b1000000000000000,
  0b0101001000001010,
  0b1000000000000000,
  0b0101001100001010,
  0b1000000000000000,
  0b0101010000001010,
  0b1000000000000000,
  0b0101010100001010,
  0b1000000000000000,
  0b0101011000001010,
  0b1000000000000000,
  0b0101011100001010,
  0b1000000000000000,
  0b0101100000001010,
  0b1000000000000000,
  0b0101100100001010,
  0b1000000000000000,
  0b0101101000001010,
  0b1000000000000000,
  0b0101101100001010,
  0b1000000000000000,
  0b0101110000001010,
  0b1000000000000000,
  0b0101110100001010,
  0b1000000000000000,
  0b0101111000001010,
  0b1000000000000000,
  0b0101111100001010,
  0b1000000000000000,
  0b0110000000001010,
  0b1000000000000000,
  0b0110000100001010,
  0b1000000000000000,
  0b0110001000001010,
  0b1000000000000000,
  0b0110001100001010,
  0b1000000000000000,
  0b0110010000001010,
  0b1000000000000000,
  0b0110010100001010,
  0b1000000000000000,
  0b0110011000001010,
  0b1000000000000000,
  0b0110011100001010,
  0b1000000000000000,
  0b0110100000001010,
  0b1000000000000000,
  0b0110100100001010,
  0b1000000000000000,
  0b0110101000001010,
  0b1000000000000000,
  0b0110101100001010,
  0b1000000000000000,
  0b0110110000001010,
  0b1000000000000000,
  0b0110110100001010,
  0b1000000000000000,
  0b0110111000001010,
  0b1000000000000000,
  0b0110111100001010,
  0b1000000000000000,
  0b0111000000001010,
  0b1000000000000000,
  0b0111000100001010,
  0b1000000000000000,
  0b0111001000001010,
  0b1000000000000000,
  0b0111001100001010,
  0b1000000000000000,
  0b0111010000001010,
  0b1000000000000000,
  0b0111010100001010,
  0b1000000000000000,
  0b0111011000001010,
  0b1000000000000000,
  0b0111011100001010,
  0b1000000000000000,
  0b0111100000001010,
  0b1000000000000000,
  0b0111100100001010,
  0b1000000000000000,
  0b0111101000001010,
  0b1000000000000000,
  0b0111101100001010,
  0b1000000000000000,
  0b0111110000001010,
  0b1000000000000000,
  0b0111110100001010,
  0b1000000000000000,
  0b0111111000001010,
  0b1000000000000000,
  0b0111111100001010,
  0b1000000000000000
};
const size_t musicLen = sizeof(music) / sizeof(uint16_t);
// Controls the music playback speed...
const float millisPerTick = 50;

SoundPlayer *player;
// This is the list of sounds that will be passed to the SoundPlayer...
Sound* arr[4];
const int arrLen = sizeof(arr) / sizeof(Sound*);

void setup() {
  // We create the sound player, using ports 2-10, playing sounds from Arduino program memory at
  // a sampling rate of 26kHz...
  player = new SoundPlayer(2, FLASH, Hz26k);
  // Create some place holder sounds using the SoundPlayer.
  for(int j = 0; j < arrLen; j++) arr[j] = player->newSound(sineWave, sineWaveLen, 440, HERTZ);
}

/**
 * Coverts a midi number to a frequency.
 * 
 * @param midi_num: A midi number to convert to a frequency, from 0 - 128
 * @returns: A float representing the frequency of the sound in hertz.
 */
float toFrequency(uint8_t midi_num) {
  return (float)pow(2, ((float)midi_num - 69) / 12) * 440;
}

void loop() {
  // Keeps track of current location in the fixed width array.
  int count = 0;
  
  for(int i = 0; i < musicLen; i++) {
    // We loop through all of the notes, reading them...
    // Format: The top bit is the clear bit, next 7 bits are the midi tone,
    //         and the final 8 bits are the duration in ticks.
    uint16_t data = (uint16_t)pgm_read_word(&(music[i]));
    unsigned long duration = (data & 0b11111111) * millisPerTick;
    float toneFreq = toFrequency((data >> 8) & 0b01111111);

    // If the clear bit is set, stop the player and reset the sound array.
    if((data >> 15) == 1) {
      player->stop();
      count = 0;
    }
    else {
      // Otherwise set the frequency of the next sound to the sound array, 
      // and tell the SoundPlayer to play the additional sound.
      player->stop();
      size_t idx = count % arrLen;
      player->setSoundDuration(arr[idx], toneFreq, HERTZ);
      count++;
      player->play(arr, (count / arrLen < 1)? count: arrLen);
    }
    // We wait in an infinite loop until the next Sound is ready to be
    // played.
    unsigned long oldTime = millis();
    while((millis() - oldTime) < duration);
  }
}
